import * as vscode from 'vscode';

/**
 * Contient les derniers caract√®res saisis par l'utilisateur.
 * Utilis√© pour d√©tecter si un mot-cl√© d√©clencheur a √©t√© tap√©.
 */
let lastTyped: string = '';

/**
 * Liste des mots-cl√©s d√©clencheurs qui peuvent √™tre utilis√©s
 * pour activer des fonctionnalit√©s bas√©es sur l‚ÄôIA (comme une compl√©tion automatique).
 */
const triggerWords = ['def', 'function', 'class', 'public', 'private'];

/**
 * G√®re les √©v√©nements de frappe clavier dans l‚Äô√©diteur VSCode.
 * 
 * √Ä chaque modification du document, cette fonction v√©rifie si le texte saisi
 * contient un mot d√©clencheur (ex: "function ") pour √©ventuellement ex√©cuter
 * une action contextuelle, comme un appel anticip√© √† un LLM.
 * 
 * @param event - L‚Äô√©v√©nement de modification du document captur√© par VSCode.
 */
export function handleTypingEvents(event: vscode.TextDocumentChangeEvent): void {
  const editor = vscode.window.activeTextEditor;

  // Ignore l'√©v√©nement si aucun √©diteur actif ou si l'√©v√©nement ne concerne pas le document affich√©
  if (!editor || event.document !== editor.document) return;

  // R√©cup√®re la premi√®re modification de texte dans l‚Äô√©v√©nement
  const change = event.contentChanges[0];

  // Ignore si la modification est vide
  if (!change || !change.text) return;

  // Ajoute le texte tap√© aux derniers caract√®res enregistr√©s
  lastTyped += change.text;

  // Garde uniquement les 50 derniers caract√®res pour limiter la m√©moire utilis√©e
  lastTyped = lastTyped.slice(-50);

  // V√©rifie si la s√©quence se termine par un mot-cl√© d√©clencheur suivi d‚Äôun espace
  for (const trigger of triggerWords) {
    if (lastTyped.endsWith(trigger + ' ')) {
      console.log(`[FastCoding] ‚ú® D√©clencheur d√©tect√© : "${trigger}"`);
      
      // üí° Tu peux d√©clencher ici une action : ex. pr√©-appel √† l'IA ou suggestion contextuelle
    }
  }
}
