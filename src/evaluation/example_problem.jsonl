{"task_id": "test/0", "prompt": "def return1():\n", "canonical_solution": "    return 1", "test": "def check(candidate):\n    assert candidate() == 1", "entry_point": "return1"}

{"task_id": "test/1", "prompt": "def square(x):\n", "canonical_solution": "    return x * x", "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(5) == 25", "entry_point": "square"}

{"task_id": "test/2", "prompt": "def is_even(n):\n", "canonical_solution": "    return n % 2 == 0", "test": "def check(candidate):\n    assert candidate(2)\n    assert not candidate(3)", "entry_point": "is_even"}

{"task_id": "test/3", "prompt": "def reverse_string(s):\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('abc') == 'cba'\n    assert candidate('') == ''", "entry_point": "reverse_string"}

{"task_id": "test/4", "prompt": "def factorial(n):\n", "canonical_solution": "    return 1 if n == 0 else n * factorial(n - 1)", "test": "def check(candidate):\n    assert candidate(0) == 1\n    assert candidate(4) == 24", "entry_point": "factorial"}

{"task_id": "test/5", "prompt": "def count_vowels(s):\n", "canonical_solution": "    return sum(1 for c in s.lower() if c in 'aeiou')", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('xyz') == 0", "entry_point": "count_vowels"}

{"task_id": "test/6", "prompt": "def remove_duplicates(lst):\n", "canonical_solution": "    return list(dict.fromkeys(lst))", "test": "def check(candidate):\n    assert candidate([1,2,2,3]) == [1,2,3]\n    assert candidate([]) == []", "entry_point": "remove_duplicates"}

{"task_id": "test/7", "prompt": "def fibonacci(n):\n", "canonical_solution": "    a, b = 0, 1\n    for _ in range(n): a, b = b, a + b\n    return a", "test": "def check(candidate):\n    assert candidate(0) == 0\n    assert candidate(5) == 5\n    assert candidate(10) == 55", "entry_point": "fibonacci"}

{"task_id": "test/8", "prompt": "def flatten(lst):\n", "canonical_solution": "    return [item for sublist in lst for item in sublist]", "test": "def check(candidate):\n    assert candidate([[1,2],[3,4]]) == [1,2,3,4]\n    assert candidate([]) == []", "entry_point": "flatten"}

{"task_id": "test/9", "prompt": "def most_frequent(lst):\n", "canonical_solution": "    return max(set(lst), key = lst.count)", "test": "def check(candidate):\n    assert candidate([1,1,2,2,2,3]) == 2\n    assert candidate(['a','b','b','a','b']) == 'b'", "entry_point": "most_frequent"}
