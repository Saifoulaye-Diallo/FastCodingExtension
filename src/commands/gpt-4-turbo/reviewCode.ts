import * as vscode from 'vscode';
import { openai } from '../../llms/openaiClient.ts';

/**
 * üîç Effectue une revue de code √† l‚Äôaide de GPT-4 Turbo.
 * 
 * Cette fonction :
 * - R√©cup√®re le code s√©lectionn√© dans l‚Äô√©diteur.
 * - L‚Äôenvoie √† OpenAI pour obtenir une analyse et une version corrig√©e.
 * - Affiche le r√©sultat soit dans un panneau WebView (si pr√©sent), soit via une notification.
 * 
 * @param panel - (Optionnel) Panneau WebView dans lequel afficher la r√©ponse du mod√®le.
 */
export async function reviewCode(panel?: vscode.Webview) {
  const editor = vscode.window.activeTextEditor;
  if (!editor) return;

  // üìÑ R√©cup√®re le code s√©lectionn√© dans l‚Äô√©diteur
  const selectedCode = editor.document.getText(editor.selection).trim();

  // üö® Si aucun code n‚Äôest s√©lectionn√©, on avertit l'utilisateur
  if (!selectedCode) {
    vscode.window.showWarningMessage("‚ö† Veuillez s√©lectionner du code √† analyser.");
    return;
  }

  try {
    // ü§ñ Envoi de la requ√™te au mod√®le GPT-4 avec des instructions tr√®s pr√©cises
    const res = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: `Tu es un assistant de revue et de d√©bogage de code. 
Tu dois faire deux choses :
1. Donner une analyse du code (qualit√©, style, erreurs potentielles, am√©liorations).
2. Proposer une version corrig√©e ou am√©lior√©e du code si n√©cessaire.
Retourne les deux sections clairement s√©par√©es avec les balises suivantes :
---REVIEW---
[Analyse du code]
---CODE---
[Code corrig√© ou optimis√©]

R√®gles strictes :
- Ne retourne jamais de balises Markdown comme \`\`\` ou des annotations de langage comme \`\`\`python.
- R√©ponds uniquement en FRAN√áAIS.
- N'invente pas de noms de fonctions ou variables qui ne sont pas pr√©sents dans le code d'origine.
- Ne change pas la logique du code sans raison valable.
- Si le code est d√©j√† optimal, indique-le clairement dans la section REVIEW.`
        },
        {
          role: "user",
          content: `Analyse et corrige ce code si n√©cessaire :\n\n${selectedCode}`
        }
      ]
    });

    // üì§ R√©cup√®re le contenu brut de la r√©ponse
    const rawOutput = res.choices[0].message?.content ?? "‚ùå Aucune suggestion re√ßue.";

    // ü™ì D√©coupe le texte selon les balises personnalis√©es ---REVIEW--- et ---CODE---
    const [_, reviewPart, codePart] = rawOutput.split(/---REVIEW---|---CODE---/);

    if (panel) {
      // üì¨ Envoi du contenu √† la WebView si elle est disponible
      if (reviewPart?.trim()) {
        panel.postMessage({ command: 'botReply', text: `\n\n### Code revue :\n\n${reviewPart.trim()}` });
      }
      if (codePart?.trim()) {
        panel.postMessage({ command: 'botReply', text: `\n\n### Code sugg√©r√© :\n\n${codePart.trim()}` });
      }
    } else {
      // ‚úÖ Cas o√π aucune WebView n‚Äôest active
      vscode.window.showInformationMessage("‚úÖ Revue g√©n√©r√©e, mais aucun panneau WebView n‚Äôest ouvert.");
    }

  } catch (error) {
    console.error('[FastCoding] ‚ùå Erreur lors de la revue :', error);
    vscode.window.showErrorMessage("Erreur pendant la revue de code.");
  }
}
