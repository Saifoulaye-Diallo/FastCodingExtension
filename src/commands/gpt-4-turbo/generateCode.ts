import * as vscode from 'vscode';
import { getOpenAIClient } from '../../llms/openaiClient.ts';
import {
  getLanguageFromExtension,
  extractLastUnresolvedComment,
  isFunctionAlreadyImplemented
} from '../../utils/langageUtils';

/**
 * üß† G√©n√®re du code automatiquement √† partir d‚Äôun commentaire non r√©solu dans l‚Äô√©diteur VSCode.
 * 
 * Fonctionnalit√©s :
 * - D√©tecte le langage du fichier selon son extension.
 * - R√©cup√®re le commentaire utilisateur (derni√®re demande avant le curseur).
 * - √âvite de r√©g√©n√©rer des fonctions d√©j√† pr√©sentes.
 * - Envoie le contexte (code avant/apr√®s + commentaire) √† GPT-4.
 * - Ins√®re le code g√©n√©r√© √† la position actuelle du curseur.
 */
export async function generateCode() {
  const editor = vscode.window.activeTextEditor;
  if (!editor) return;

  const document = editor.document;
  const position = editor.selection.active;

  // üìé D√©duction du langage √† partir de l‚Äôextension du fichier
  const fileExtension = document.fileName.split('.').pop()?.toLowerCase();
  const { language: languageId, commentType, multiLineComment } = getLanguageFromExtension(fileExtension);

  if (!languageId) {
    vscode.window.showWarningMessage("‚ö†Ô∏è Impossible de d√©tecter le langage. V√©rifiez l'extension du fichier.");
    return;
  }

  // üìÑ R√©cup√®re le contexte autour du curseur (¬±5 lignes)
  const startLine = Math.max(0, position.line - 5);
  const endLine = Math.min(document.lineCount, position.line + 5);
  const codeBeforeCursor = document.getText(new vscode.Range(startLine, 0, position.line, position.character));
  const codeAfterCursor = document.getText(new vscode.Range(position.line, position.character, endLine, 1000));

  // üìù Extraction du dernier commentaire non r√©solu
  const lastUnresolvedComment = extractLastUnresolvedComment(document, languageId, commentType, multiLineComment);
  if (!lastUnresolvedComment) {
    vscode.window.showWarningMessage("‚ö†Ô∏è Aucun commentaire non r√©solu trouv√©.");
    return;
  }

  // üö´ V√©rifie si la fonction demand√©e est d√©j√† pr√©sente dans le fichier
  if (isFunctionAlreadyImplemented(document, lastUnresolvedComment, languageId)) {
    vscode.window.showWarningMessage("‚ö†Ô∏è La fonction demand√©e semble d√©j√† exister.");
    return;
  }

  // üß† D√©tection du type de g√©n√©ration demand√©e (fonction, bloc, etc.)
  const isFunction = /\b(fonction|m√©thode|impl√©menter|classe|cr√©er|d√©finir|constructor|function|method|class|define|implement)\b/i.test(lastUnresolvedComment);
  const isBlockOfCode = /\b(bloc|exemple|snippet|code|assigner|calculer|trier|afficher|v√©rifier|example|snippet|sort|display|check)\b/i.test(lastUnresolvedComment);

  let generationType = "D√©tecte automatiquement le meilleur format de sortie.";
  if (isFunction) {
    generationType = "G√©n√®re une fonction ou une classe bien structur√©e avec documentation.";
  } else if (isBlockOfCode) {
    generationType = "G√©n√®re uniquement un extrait de code propre et optimis√©.";
  }

  // üîß Formate le commentaire avec sa syntaxe selon le langage
  const commentStart = multiLineComment ? multiLineComment.start : commentType;
  const commentEnd = multiLineComment ? multiLineComment.end : "";
  const formattedComment = multiLineComment
    ? `${commentStart}\n${lastUnresolvedComment}\n${commentEnd}`
    : `${commentStart} ${lastUnresolvedComment}`;

  try {
    // üì° Appel GPT-4 avec le contexte complet (avant, apr√®s, commentaire)
    const openai = getOpenAIClient();
    const response = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: `Tu es une intelligence artificielle avanc√©e sp√©cialis√©e dans la g√©n√©ration de code, √† la mani√®re de GitHub Copilot, toujours repondre dans la langue detecter dans le contexte.

Ta t√¢che est de g√©n√©rer **uniquement** le code demand√©, en suivant strictement les contraintes suivantes :

üîπ **Contexte** :
- Langage de programmation : ${languageId}
- Code avant le curseur :
${codeBeforeCursor}
- Code apr√®s le curseur :
${codeAfterCursor}
- Commentaire utilisateur (uniquement le dernier avant le curseur) :
${formattedComment}

üîπ **R√®gles de g√©n√©ration** :
- N‚Äôutilise que le dernier commentaire comme r√©f√©rence. Ignore les autres.
- Ne r√©g√©n√®re jamais du code d√©j√† existant (fonctions, classes, variables).
- Ne g√©n√®re que le code requis : pas de commentaire, pas d‚Äôexplication, pas de Markdown.
- Pas d‚Äôintroduction, pas de conclusion.
- Respecte l‚Äôindentation, les conventions et les meilleures pratiques du langage.
- N‚Äôajoute aucune d√©pendance externe ou import inutile.
- Si un import est requis, place-le en haut du fichier.
- Adapte parfaitement le code au contexte fourni.

üîπ **Contraintes suppl√©mentaires** :
- La r√©ponse ne doit contenir que le code pur.
- Si une fonction est demand√©e, ne retourner que la fonction.
- Si un snippet est demand√©, ne retourner que le snippet.
- Si une classe est demand√©e, ne retourner que la classe et ses m√©thodes n√©cessaires.`
        },
        {
          role: "user",
          content: `G√©n√®re uniquement ${generationType} pour cette demande en ${languageId}. La r√©ponse doit uniquement contenir le code, sans commentaire, explication ni balise Markdown. Ne r√©g√©n√®re pas de code d√©j√† pr√©sent. Commentaire : ${formattedComment}`
        }
      ],
      temperature: 0.1,
      top_p: 0.9,
      frequency_penalty: 0.1,
      presence_penalty: 0.1,
      max_tokens: 350,
    });

    // üßº Nettoyage de la sortie (suppression des ```python)
    let suggestion = response.choices[0]?.message?.content ?? "";
    suggestion = suggestion.replace(/```[a-zA-Z]*\n?/g, "").replace(/```/g, "").trim();

    // ‚ùå Si rien n'est g√©n√©r√©, avertir
    if (!suggestion.trim()) {
      vscode.window.showWarningMessage("‚ö†Ô∏è L'IA n'a pas g√©n√©r√© de code. Essayez d'√™tre plus pr√©cis.");
      return;
    }

    // üñäÔ∏è Insertion du code g√©n√©r√© √† la position du curseur
    editor.edit(editBuilder => {
      editBuilder.insert(position, suggestion);
    });

  } catch (error) {
    vscode.window.showErrorMessage(`‚ùå Erreur lors de la g√©n√©ration de code : ${error}`);
  }
}
