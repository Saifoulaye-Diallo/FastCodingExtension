import * as vscode from 'vscode';
import { openai } from '../../llms/openaiClient.ts';
import { getLanguageFromExtension, extractLastUnresolvedComment, isFunctionAlreadyImplemented } from '../../utils/langageUtils.js';

export async function generateCode() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) return;

    const document = editor.document;
    const position = editor.selection.active;
    const fileExtension = document.fileName.split('.').pop()?.toLowerCase();
    const { language: languageId, commentType, multiLineComment } = getLanguageFromExtension(fileExtension);

    if (!languageId) {
        vscode.window.showWarningMessage("‚ö†Ô∏è Impossible de d√©tecter le langage. V√©rifiez l'extension du fichier.");
        return;
    }

    const startLine = Math.max(0, position.line - 5);
    const endLine = Math.min(document.lineCount, position.line + 5);
    const codeBeforeCursor = document.getText(new vscode.Range(startLine, 0, position.line, position.character));
    const codeAfterCursor = document.getText(new vscode.Range(position.line, position.character, endLine, 1000));

    const lastUnresolvedComment = extractLastUnresolvedComment(document, languageId, commentType, multiLineComment);
    if (!lastUnresolvedComment) {
        vscode.window.showWarningMessage("‚ö†Ô∏è Aucun commentaire non r√©solu trouv√©.");
        return;
    }

    if (isFunctionAlreadyImplemented(document, lastUnresolvedComment, languageId)) {
        vscode.window.showWarningMessage("‚ö†Ô∏è La fonction demand√©e semble d√©j√† exister.");
        return;
    }

    const isFunction = /\b(fonction|m√©thode|impl√©menter|classe|cr√©er|d√©finir|constructor|function|method|class|define|implement)\b/i.test(lastUnresolvedComment);
    const isBlockOfCode = /\b(bloc|exemple|snippet|code|assigner|calculer|trier|afficher|v√©rifier|example|snippet|sort|display|check)\b/i.test(lastUnresolvedComment);

    let generationType = "D√©tecte automatiquement le meilleur format de sortie.";
    if (isFunction) {
        generationType = "G√©n√®re une fonction ou une classe bien structur√©e avec documentation.";
    } else if (isBlockOfCode) {
        generationType = "G√©n√®re uniquement un extrait de code propre et optimis√©.";
    }

    const commentStart = multiLineComment ? multiLineComment.start : commentType;
    const commentEnd = multiLineComment ? multiLineComment.end : "";
    const formattedComment = multiLineComment 
        ? `${commentStart}\n${lastUnresolvedComment}\n${commentEnd}` 
        : `${commentStart} ${lastUnresolvedComment}`;

    try {
        const response = await openai.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [
                {
                    role: "system",
                    content: `Tu es une intelligence artificielle avanc√©e sp√©cialis√©e dans la g√©n√©ration de code, √† la mani√®re de GitHub Copilot.

Ta t√¢che est de g√©n√©rer **uniquement** le code demand√©, en suivant strictement les contraintes suivantes :

üîπ **Contexte** :
- Langage de programmation : ${languageId}
- Code avant le curseur :
${codeBeforeCursor}
- Code apr√®s le curseur :
${codeAfterCursor}
- Commentaire utilisateur (uniquement le dernier avant le curseur) :
${formattedComment}

üîπ **R√®gles de g√©n√©ration** :
- N‚Äôutilise que le dernier commentaire comme r√©f√©rence. Ignore les autres.
- Ne r√©g√©n√®re jamais du code d√©j√† existant (fonctions, classes, variables).
- Ne g√©n√®re que le code requis : pas de commentaire, pas d‚Äôexplication, pas de Markdown.
- Pas d‚Äôintroduction, pas de conclusion.
- Respecte l‚Äôindentation, les conventions et les meilleures pratiques du langage.
- N‚Äôajoute aucune d√©pendance externe ou import inutile.
- Si un import est requis, place-le en haut du fichier.
- Adapte parfaitement le code au contexte fourni.

üîπ **Contraintes suppl√©mentaires** :
- La r√©ponse ne doit contenir que le code pur.
- Si une fonction est demand√©e, ne retourner que la fonction.
- Si un snippet est demand√©, ne retourner que le snippet.
- Si une classe est demand√©e, ne retourner que la classe et ses m√©thodes n√©cessaires.`
                },
                { 
                    role: "user", 
                    content: `G√©n√®re uniquement ${generationType} pour cette demande en ${languageId}. La r√©ponse doit uniquement contenir le code, sans commentaire, explication ni balise Markdown. Ne r√©g√©n√®re pas de code d√©j√† pr√©sent. Commentaire : ${formattedComment}`
                }
            ],
            temperature: 0.1,
            top_p: 0.9,
            frequency_penalty: 0.1,
            presence_penalty: 0.1,
            max_tokens: 350,
        });

        let suggestion = response.choices[0]?.message?.content ?? "";
        suggestion = suggestion.replace(/```[a-zA-Z]*\n?/g, "").replace(/```/g, "").trim();

        if (!suggestion.trim()) {
            vscode.window.showWarningMessage("‚ö†Ô∏è L'IA n'a pas g√©n√©r√© de code. Essayez d'√™tre plus pr√©cis.");
            return;
        }

        editor.edit(editBuilder => {
            editBuilder.insert(position, suggestion);
        });
    } catch (error) {
        vscode.window.showErrorMessage(`‚ùå Erreur lors de la g√©n√©ration de code : ${error}`);
    }
}
