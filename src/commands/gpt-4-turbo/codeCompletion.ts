
import { getOpenAIClient } from '../../llms/openaiClient.ts';
import { getConfigurationModel } from '../../utils/settings';

/**
 * @module codeCompletion
 * 
 * @description
 * Ce module fournit une fonction d'autocompl√©tion bas√©e sur un mod√®le d'intelligence artificielle
 * (comme GPT-4 Turbo). Il est utilis√© pour pr√©dire intelligemment la suite du code que l'utilisateur
 * est en train d'√©crire dans un √©diteur VSCode, en se basant sur le contexte pr√©sent avant et apr√®s
 * le curseur. La compl√©tion est brutale (sans explication ni d√©corations) et respecte les
 * conventions de code propres et ex√©cutables.
 */

/**
 * üß† G√©n√®re une suggestion de code √† partir du contexte (avant et apr√®s le curseur).
 * 
 * Cette fonction utilise le mod√®le configur√© par l'utilisateur (par d√©faut GPT-4 Turbo)
 * pour pr√©dire du code brut, propre et pr√™t √† √™tre ins√©r√© automatiquement.
 * Elle est con√ßue pour s'int√©grer dans un `InlineCompletionItemProvider` pour VSCode.
 * 
 * @async
 * @function codeCompletion
 * 
 * @param {string} before - Le code pr√©sent avant le curseur (contexte gauche).
 * @param {string} [after=''] - Le code situ√© apr√®s le curseur (contexte droit, facultatif).
 * 
 * @returns {Promise<string>} - La compl√©tion g√©n√©r√©e par l'IA (code brut pr√™t √† l'insertion).
 * 
 * @example
 * const suggestion = await codeCompletion("function hello(", ")");
 * // R√©sultat attendu : "name) {\n  console.log('Hello ' + name);\n}"
 */
export async function codeCompletion(before: string, after: string = ''): Promise<string> {
  const prompt = `${before}<CURSOR>${after}`;
  const model = getConfigurationModel();

  try {
    switch (model) {
      case 'GPT-4':
      default: {
        const openai = getOpenAIClient();
        const completion = await openai.chat.completions.create({
          model: "gpt-4-turbo",
          messages: [
            {
              role: "system",
              content: `Tu es une IA de compl√©tion de code comme GitHub Copilot.
Ton r√¥le est de pr√©dire ce que l‚Äôutilisateur est en train de taper, √† partir du contexte fourni.

‚ùó R√®gles strictes :
- Ne retourne que du **code brut** (aucun commentaire, explication ou markdown).
- Le code doit √™tre pr√™t √† √™tre ins√©r√© imm√©diatement apr√®s le curseur.
- Le code doit √™tre **syntaxiquement valide** et **ex√©cutable**.
- Chaque ligne de code doit √™tre correctement indent√©e.
- Si plusieurs instructions sont g√©n√©r√©es, elles doivent √™tre s√©par√©es par des retours √† la ligne (\n).
- Le code g√©n√©r√© ne doit pas causer d'erreurs de syntaxe.
- La compl√©tion doit **terminer correctement** toutes les instructions (aucune parenth√®se manquante, aucune ligne incompl√®te).
- Fais tous les contr√¥les n√©cessaires afin d‚Äôavoir un code parfait et s√©curis√© qui peut r√©ussir √† tous les tests.
- Ne dupliques pas le code d√©j√† pr√©sent avant le curseur.
- Si une ligne de code est d√©j√† commenc√©e, compl√®te-la intelligemment **sur la m√™me ligne** sans revenir √† la ligne inutilement.
- Chaque bloc de code (fonction, classe, boucle, condition, etc.) doit √™tre **commenc√© sur une nouvelle ligne propre**.
- Ne g√©n√®re jamais plusieurs blocs de code coll√©s sur la m√™me ligne (ex. : deux fonctions √† la suite sur une m√™me ligne).
- Le code doit √™tre lisible, proprement structur√©, et imm√©diatement ex√©cutable sans modification.
- Aucune phrase, aucun texte explicatif ou d√©coratif.`
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 80,
          temperature: 0.7,
          top_p: 1,
          stop: ["\n\n"]
        });

        return completion.choices[0]?.message?.content?.trim() ?? '';
      }
    }
  } catch (error) {
    console.error('[FastCoding] ‚ùå Erreur LLM inline :', error);
    return '';
  }
}
