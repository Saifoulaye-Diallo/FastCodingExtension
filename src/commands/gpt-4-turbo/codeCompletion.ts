
import { getOpenAIClient } from '../../evaluation/openaiClientEval';
import { getConfigurationModel } from '../../utils/settings';

/**
 * Remplace les tirets d‚Äôindentation par des espaces (4 espaces par niveau).
 * Exemple :
 * ----return x ‚Üí     return x
 */
function removeDashesIndentation(code: string): string {
  return code
    .split('\n')
    .map(line => line.replace(/^(-{4})+/, match => ' '.repeat(match.length)))
    .join('\n');
}

/**
 * @module codeCompletion
 * 
 * @description
 * Ce module fournit une fonction d'autocompl√©tion bas√©e sur un mod√®le d'intelligence artificielle
 * (comme GPT-4 Turbo). Il est utilis√© pour pr√©dire intelligemment la suite du code que l'utilisateur
 * est en train d'√©crire dans un √©diteur VSCode, en se basant sur le contexte pr√©sent avant et apr√®s
 * le curseur. La compl√©tion est brutale (sans explication ni d√©corations) et respecte les
 * conventions de code propres et ex√©cutables.
 */

/**
 * üß† G√©n√®re une suggestion de code √† partir du contexte (avant et apr√®s le curseur).
 * 
 * Cette fonction utilise le mod√®le configur√© par l'utilisateur (par d√©faut GPT-4 Turbo)
 * pour pr√©dire du code brut, propre et pr√™t √† √™tre ins√©r√© automatiquement.
 * Elle est con√ßue pour s'int√©grer dans un `InlineCompletionItemProvider` pour VSCode.
 * 
 * @async
 * @function codeCompletion
 * 
 * @param {string} before - Le code pr√©sent avant le curseur (contexte gauche).
 * @param {string} [after=''] - Le code situ√© apr√®s le curseur (contexte droit, facultatif).
 * 
 * @returns {Promise<string>} - La compl√©tion g√©n√©r√©e par l'IA (code brut pr√™t √† l'insertion).
 * 
 * @example
 * const suggestion = await codeCompletion("function hello(", ")");
 * // R√©sultat attendu : "name) {\n  console.log('Hello ' + name);\n}"
 */
export async function codeCompletion(before: string, after: string = ''): Promise<string> {
  const prompt = `${before}<CURSOR>${after}`;
  const model = getConfigurationModel();

  try {
    switch (model) {
      case 'GPT-4':
      default: {
        const openai = getOpenAIClient();
        const completion = await openai.chat.completions.create({
          model: "gpt-4-turbo",
          temperature: 0.1,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1,
          max_tokens: 500,
          messages: [
            {
              role: "system",
              content: `
              Tu es une IA sp√©cialis√©e en compl√©tion de code Python.

              üéØ Objectif :
              Compl√©ter uniquement le bloc de code Python fourni (souvent une fonction partiellement √©crite), en respectant les r√®gles suivantes.

              ‚úÖ R√®gles :
              1. Retourne uniquement le **code √† compl√©ter**, pas le code d√©j√† pr√©sent.
              2. Chaque ligne **indent√©e** doit utiliser des tirets (\`-\`) √† la place des espaces :
                - Une indentation de 4 espaces = \`----\`
                - 8 espaces = \`--------\`, etc.
              3. Ne retourne **aucun docstring**, aucun commentaire, aucune ligne vide inutile.
              4. Le code doit √™tre :
                - Syntaxiquement **valide**
                - Conforme √† **PEP8**
                - Directement **ex√©cutable**
              5. Tu ne r√©√©cris **jamais** la signature de la fonction.
              6. Aucune phrase explicative, aucune balise Markdown, **uniquement du code brut avec indentation en tirets**.

              üì¶ Exemple de r√©ponse attendue :
              Si l'utilisateur donne :
                  def somme(a, b):
                      """Additionne deux entiers."""
              Et qu'il manque le \`return\`, tu dois r√©pondre :
              ----return a + b

              C‚Äôest tout.`
              
            },       
            {
              role: "user",
              content: prompt
            }
          ],
        });

        const rawCompletion = completion.choices[0]?.message?.content?.trim() ?? '';
        const cleanCompletion = removeDashesIndentation(rawCompletion);
        return cleanCompletion;
      }
    }
  } catch (error) {
    console.error('[FastCoding] ‚ùå Erreur LLM inline :', error);
    return '';
  }
}
