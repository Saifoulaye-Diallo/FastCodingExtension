import * as vscode from 'vscode';
import { getOpenAIClient } from '../../llms/openaiClient.ts';

/**
 * üìö G√©n√®re automatiquement une documentation en fran√ßais
 * pour le code s√©lectionn√© dans l‚Äô√©diteur actif.
 *
 * Fonctionnalit√©s :
 * - Si le code est une fonction ou une classe ‚ûú ins√®re un **docstring** (Python, JS, TS...).
 * - Si c‚Äôest un bloc de code isol√© ‚ûú ins√®re un **commentaire explicatif au-dessus**.
 *
 * La documentation g√©n√©r√©e est format√©e proprement, sans markdown, et ins√©r√©e automatiquement dans le fichier.
 */
export async function generateDocumentation() {
  const editor = vscode.window.activeTextEditor;
  if (!editor) return;

  // üìÑ R√©cup√®re le code s√©lectionn√© dans l‚Äô√©diteur
  const selectedCode = editor.document.getText(editor.selection).trim();

  // üö® Avertit si aucune s√©lection n‚Äôest faite
  if (!selectedCode) {
    vscode.window.showWarningMessage("‚ö† Veuillez s√©lectionner une fonction, une classe ou un bloc de code.");
    return;
  }

  // ü§ñ V√©rifie si le code s√©lectionn√© est probablement une fonction ou classe
  const isFunctionOrClass = /^(\s*)(def |class |async |public |function )/.test(selectedCode);

  try {
    // üì§ Requ√™te au mod√®le GPT-4 Turbo pour g√©n√©rer la documentation
    const openai = getOpenAIClient();
    const res = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: `# G√©n√©rateur Strict de Documentation Technique

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö† DIRECTIVES ABSOLUES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. NE JAMAIS :
   - √âcrire "Je ne peux pas..."
   - Demander des pr√©cisions
   - G√©n√©rer du code original
   - Faire des phrases d'introduction
   - Pas de # et // ensemble

2. TOUJOURS :
   - D√©tecter automatiquement le langage
   - G√©n√©rer UNIQUEMENT la documentation
   - Suivre strictement les formats ci-dessous

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìù FORMATS OBLIGATOIRES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Pour JavaScript/TypeScript :
/**
 * Description en 1 phrase
 * @param {type} param Description
 * @returns {type} Description
 */

Pour blocs JS/TS :
// Description en 3-7 mots

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ EXEMPLE D'EX√âCUTION CORRECTE
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Entr√©e :
let result = addTwoNumbers(5, 3);
console.log("R√©sultat:", result);

Sortie REQUISE :
// Affiche le r√©sultat 5+3

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üö® REJET AUTOMATIQUE
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Toute r√©ponse contenant :
- "Je ne peux pas"
- "Pourriez-vous"
- Du code original
- Des phrases d'introduction
- # et // ensemble 
`
        },
        {
          role: "user",
          content: selectedCode
        }
      ],
      temperature: 0.4,
      max_tokens: 200
    });

    const doc = res.choices[0].message?.content?.trim();

    // ‚ö† Avertit si l'IA n‚Äôa rien g√©n√©r√©
    if (!doc) {
      vscode.window.showWarningMessage("‚ö† Aucune documentation g√©n√©r√©e.");
      return;
    }

    // üßÆ Calcul de l‚Äôindentation courante de la ligne s√©lectionn√©e
    const selection = editor.selection;
    const startLine = selection.start.line;
    const lineText = editor.document.lineAt(startLine).text;
    const indentMatch = lineText.match(/^\s*/);
    const indentation = indentMatch ? indentMatch[0] + '    ' : '    ';

    // üñäÔ∏è Insertion de la documentation g√©n√©r√©e
    editor.edit(editBuilder => {
      if (isFunctionOrClass) {
        // üîπ Cas : fonction ou classe ‚ûú ins√®re un docstring indent√© √† l'int√©rieur
        const formattedDocstring = doc
          .split('\n')
          .map(line => indentation + line)
          .join('\n') + '\n';

        const insertPosition = new vscode.Position(startLine + 1, 0);
        editBuilder.insert(insertPosition, formattedDocstring);
      } else {
        // üîπ Cas : bloc de code ‚ûú ins√®re un commentaire au-dessus
        const commentPrefix = lineText.trimStart().startsWith('//') ? '// ' : '# ';
        const formattedComment = doc
          .split('\n')
          .map(line => commentPrefix + line)
          .join('\n') + '\n';

        editBuilder.insert(selection.start, formattedComment);
      }
    });
  } catch (error) {
    console.error('[FastCoding] ‚ùå Erreur lors de la g√©n√©ration de documentation :', error);
    vscode.window.showErrorMessage("Erreur pendant la g√©n√©ration de documentation.");
  }
}
